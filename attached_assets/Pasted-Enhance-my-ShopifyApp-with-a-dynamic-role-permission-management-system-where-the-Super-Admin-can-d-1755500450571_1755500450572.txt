Enhance my ShopifyApp with a dynamic role & permission management system where the Super Admin can decide which roles (Admin, Staff, Customer) have access to specific pages and operations.

Requirements:

Backend (Node.js/Express + JWT):
1. Extend the User model to support dynamic permissions in addition to roles.
   - roles: [superadmin, admin, staff, customer]
   - permissions: stored in DB as an object or JSON (e.g., { "inventory:view": true, "inventory:edit": false })
2. Create a "permissions" collection/table with predefined operations:
   - Example: inventory:view, inventory:create, inventory:edit, inventory:delete
   - orders:view, orders:create, etc.
3. Create APIs (Super Admin only):
   - GET /permissions → list all available permissions
   - GET /role-permissions/:role → get role’s assigned permissions
   - PUT /role-permissions/:role → update permissions for a role
4. Middleware:
   - Check both role and permission before allowing access to a route
   - Example: only allow if user.role = "admin" and user.permissions["orders:view"] = true

Frontend (React/Next.js):
1. Create a Super Admin Panel → “Role & Permission Management”
   - Table showing roles vs. permissions (checkbox matrix)
   - Super Admin can toggle which role has which permission
   - Save button calls backend API to update permissions
2. Role-based navigation:
   - Only show menu items if role has permission
   - Example: If Staff doesn’t have `reports:view`, hide Reports menu
3. Button/Action-level control:
   - Disable/hide buttons if permission is false
   - Example: If Staff has `inventory:view` but not `inventory:edit`, show Inventory list but hide Edit/Delete buttons

Seed Data:
- Default Super Admin: superadmin@shopifyapp.com / superadmin123
- Permissions: inventory, orders, users, reports (CRUD ops)
- Super Admin has full access and cannot be modified
- Admin, Staff, Customer start with sensible defaults

Security:
- Only Super Admin can update role permissions
- Prevent modifying Super Admin role/permissions
- All APIs secured with JWT + permission middleware

Goal:
Super Admin can configure exactly which roles can access which pages and operations at runtime. UI dynamically adapts so non-authorized roles don’t see or cannot click restricted actions.
