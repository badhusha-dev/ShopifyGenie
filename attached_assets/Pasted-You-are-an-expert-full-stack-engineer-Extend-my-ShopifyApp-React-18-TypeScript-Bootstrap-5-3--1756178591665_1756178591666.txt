You are an expert full-stack engineer. Extend my ShopifyApp (React 18 + TypeScript + Bootstrap 5.3 + Express.js + PostgreSQL + JWT + RBAC) 
by generating **sample accounting data** for testing and create a **README.md** file to document it.

Goal
Seed realistic financial data into the system and document how it works. 
The data should align with standard accounting practices (debits/credits, AR/AP, reports).

Data to Generate
1. Chart of Accounts
   - Asset, Liability, Equity, Revenue, Expense accounts.
   - Example: Cash, Accounts Receivable, Accounts Payable, Sales Revenue, COGS, Marketing Expense.

2. General Ledger
   - Transactions posted from orders, refunds, payouts, and expenses.
   - Each GL entry links back to Chart of Accounts with debit/credit.

3. Journal Entries
   - Auto entries from Shopify orders/refunds.
   - Manual adjustments (e.g., depreciation, corrections).
   - Balanced entries (total debit = total credit).

4. Accounts Receivable (AR)
   - Customer invoices (pending, partial, paid).
   - Aging report data (0–30 / 31–60 / 61–90 days overdue).

5. Accounts Payable (AP)
   - Vendor bills (unpaid, paid, overdue).
   - Vendor statement sample.

6. Wallets & Credits
   - Customer wallets with refunds/loyalty points as credits.
   - Vendor wallets for pending payouts.

7. Financial Reports
   - Profit & Loss (Revenue – COGS – Expenses).
   - Balance Sheet snapshot (Assets, Liabilities, Equity).
   - Cash Flow Statement (Operating, Investing, Financing).

Backend Deliverables
- Create seeders (`/seed/accountsData.ts`) to populate sample data.
- PostgreSQL schema inserts for accounts, ledger, journals, AR, AP, wallets, reports.
- Ensure referential integrity (ledger → chart of accounts).

Documentation Deliverables
- New `README-ACCOUNTS.md` file with:
  * Overview of accounting module.
  * Sample Chart of Accounts table.
  * Example Journal Entry (Debit/Credit).
  * Example AR/AP records.
  * Example Wallets data.
  * Example P&L, Balance Sheet, Cash Flow outputs.
  * Instructions for how the seed data can be used in dev/test.

Requirements
- Data should be realistic and consistent (e.g., Sales Revenue increases with orders, Cash decreases with payouts).
- Keep accounting double-entry rules valid.
- RBAC: Only SuperAdmin/Admin can create/modify; Staff view-only.

Output
1. Sample seed data files for accounting tables.
2. A new README file (`README-ACCOUNTS.md`) documenting all datasets with examples.
