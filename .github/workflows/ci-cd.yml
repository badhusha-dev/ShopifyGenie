
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint --if-present

      - name: Run frontend tests
        run: npm run test:client --if-present

      - name: Run backend tests
        run: npm run test:server --if-present

      - name: Build application
        run: npm run build

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: github.event_name != 'pull_request'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Deploy to Replit
        run: |
          echo "Deploying to Replit..."
          # Add your Replit deployment commands here
          # This could involve calling Replit's API or using their CLI
          # Example using curl to trigger a deployment webhook:
          # curl -X POST "${{ secrets.REPLIT_DEPLOY_WEBHOOK }}" \
          #   -H "Authorization: Bearer ${{ secrets.REPLIT_API_TOKEN }}" \
          #   -H "Content-Type: application/json" \
          #   -d '{
          #     "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest",
          #     "env": {
          #       "NODE_ENV": "production",
          #       "PORT": "5000",
          #       "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
          #       "JWT_SECRET": "${{ secrets.JWT_SECRET }}"
          #     }
          #   }'
          echo "Deployment completed successfully"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
